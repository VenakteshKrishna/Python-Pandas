# -*- coding: utf-8 -*-
"""OOPS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nFAe-kHvpOUswmkD9rw20KBhJDwixPJX
"""

# OOPS

# OBEJECT ORIENTED PROGRAMMING LANGUAGE

# CLASS
# OBJECT
# SELF
# FUNCTIONS IN A CLASS
# VARIABLES IN A CLASS
# CONSTRUCTORS
# INHERTIANCE
# POLYMORPHISAM
# ABSTRACTION
# ENCAPUSULATION AND ACCESS MODIFIERS

# class = where we are having functions or variables
# object = instances of a class or assistant to principal and also a incharge of allocated class
# principal = the person who writes the code
#

class CA : # class name we can pass captial letters only (this is a pep8 rule in python syntax)
  a= 100
  b = 200
 kumar = CA()  # kumar is an object
print(kumar.a)
print(kumar.b)

class AJ :
  a = 20
  b= 30
kiran = AJ() # kiran is an object
print(kiran.a)
print(kiran.b)

class cj:
  c= 20
  b =20
bob = cj() # bob is an object
print(bob.c/bob.b)

class dj :
  c = 10
  a = 19
print(dj.a) # if there is no variable principle will use class name and call variables and functions directly

class boss:

 raju = boss()

 raju.peter = 100
 raju.sam = 300
print(raju.peter*raju.sam)

class CSE:
  pass


kumar = CSE()

kumar.john = 100 # varibale will be created in the class
kumar.peter = 500 # varibale will be created in the class

print(kumar.john * kumar.peter)

class LOL:
  pass

raju = LOL()
raju.peter = 100
raju.sam = 300
print(raju.peter*raju.sam)

class run :
  pass

run.peter = 20
run.sam = 69
print(run.peter*run.sam)

class sam :
  pass

sam.peter = 60
sam.lol = 70
print(sam.peter*sam.lol)

def run():
 print("hi")
def sharuk ():
  for i in range(1,11):
   print(f'good morning : {i}')
sharuk()
run()

def chase():
  print("hello")
def salman ():
  for i in range (1,23):
    print("good morning",i)
chase()
salman()

class ap():
  def ss(self):
    a= 10
    b = 20
    print(a+b)
    self.divide()


  def divide(self): # self is the variable it takes the object copy
    g =10
    h =90
    print(g-h)
kiran = ap()
kiran.ss()

class cd():
  def jd(self):
    for i in range (1,11):
      print("good morning" , i)
rajuu = cd()
rajuu.jd()

